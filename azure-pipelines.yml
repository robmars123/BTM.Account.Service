# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master  # Replace with the branch you want to monitor

pool: Default

stages:
  - stage: Restore
    jobs:
      - job: RestoreJob
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '8.x'  # Use .NET 9.x or any other version you're targeting
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - checkout: self  # Ensure repository is checked out early
            clean: true

          - script: dotnet restore
            displayName: 'Restore dependencies'

  - stage: Build
    dependsOn: Restore  # This makes Build depend on the Restore stage
    jobs:
      - job: BuildJob
        steps:
          - script: dotnet build --configuration Release
            displayName: 'Build project'

  - stage: Test
    dependsOn: Build
    jobs:
      - job: TestJob
        steps:
          # - task: UseDotNet@2
          #   inputs:
          #     packageType: 'sdk'
          #     version: '9.0.x'  # or whatever you're using
          #     installationPath: $(Agent.ToolsDirectory)/dotnet

          # - script: |
          #     dotnet build "./BTM.NUnit.Playwright/BTM.NUnit.Playwright.Tests.csproj" --configuration Release -o "$(Build.ArtifactStagingDirectory)/testbin"
          #   displayName: 'Build test project'
          
          # - script: powershell bin/Release/net9.0/playwright.ps1 install --with-deps
          #   workingDirectory: ./BTM.NUnit.Playwright
          #   displayName: 'Install Playwright Browsers'

    # Step 1: Install .NET SDK
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '9.0.x'
          displayName: 'Install .NET SDK'

        # Step 2: Restore .NET project
        - script: dotnet restore ./BTM.NUnit.Playwright/BTM.NUnit.Playwright.Tests.csproj
          displayName: 'Restore .NET dependencies'

        # Step 3: Build .NET project
        - script: dotnet build ./BTM.NUnit.Playwright/BTM.NUnit.Playwright.Tests.csproj --configuration Release
          displayName: 'Build .NET Test Project'

        # Step 4: Install Node.js (for Playwright)
        - task: NodeTool@0
          inputs:
            versionSpec: '18'
          displayName: 'Install Node.js'

        # Step 5: Install npm dependencies (including Playwright)
        - script: npm install
          displayName: 'Install npm dependencies'

        # Step 6: Install Playwright browsers
        - script: npx playwright install --with-deps
          displayName: 'Install Playwright Browsers'

        # Step 7: Run NUnit tests
        - task: VSTest@2
          inputs:
            testSelector: 'testAssemblies'
            testAssemblyVer2: '**\BTM.NUnit.Playwright.Tests.dll'
            searchFolder: '$(System.DefaultWorkingDirectory)'
            platform: 'Any CPU'
            configuration: 'Release'
            runInParallel: true
            diagnosticsEnabled: true
          displayName: 'Run NUnit Tests'

        # Step 8: Run Playwright tests (optional, for E2E/UI testing)
        - script: npx playwright test
          displayName: 'Run Playwright Tests'
          env:
            CI: 'true'

          # - task: VSTest@2
          #   inputs:
          #     testSelector: 'testAssemblies'
          #     testAssemblyVer2: |
          #       **\BTM.NUnit.Playwright.Tests.dll
          #     searchFolder: '$(Build.ArtifactStagingDirectory)/testbin'
          #     platform: 'Any CPU'
          #     configuration: 'Release'
          #     runInParallel: true
          #     codeCoverageEnabled: false
          #     diagnosticsEnabled: true

  # - stage: Publish
  #   dependsOn: Test
  #   jobs:
  #     - job: PublishJob
  #       steps:
  #         - script: dotnet publish --configuration Release --output $(Build.ArtifactStagingDirectory)/publish
  #           displayName: 'Publish application'

  # - stage: Deploy
  #   dependsOn: Publish
  #   jobs:
  #     - job: DeployJob
  #       steps:
  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             pathToPublish: '$(Build.ArtifactStagingDirectory)/publish'
  #             artifactName: 'drop'
  #             publishLocation: 'Container'
