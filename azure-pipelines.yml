# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master  # Replace with the branch you want to monitor

pool: Default

stages:
  - stage: Restore
    jobs:
      - job: RestoreJob
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '8.x'  # Use .NET 9.x or any other version you're targeting
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - checkout: self  # Ensure repository is checked out early
            clean: true

          - script: dotnet restore
            displayName: 'Restore dependencies'

  - stage: Build
    dependsOn: Restore  # This makes Build depend on the Restore stage
    jobs:
      - job: BuildJob
        steps:
          - script: dotnet build --configuration Release
            displayName: 'Build project'

  - stage: Test
    dependsOn: Build
    jobs:
      - job: TestJob
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '9.0.x'  # or whatever you're using
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - script: |
              dotnet build "./BTM.NUnit.Playwright/BTM.NUnit.Playwright.Tests.csproj" --configuration Release -o "$(Build.ArtifactStagingDirectory)/testbin"
            displayName: 'Build test project'
          
          - script: pwsh bin/Release/net6.0/playwright.ps1 install --with-deps
            workingDirectory: ./BTM.NUnit.Playwright
            displayName: 'Install Playwright Browsers'

          - task: VSTest@2
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\BTM.NUnit.Playwright.Tests.dll
              searchFolder: '$(Build.ArtifactStagingDirectory)/testbin'
              platform: 'Any CPU'
              configuration: 'Release'
              runInParallel: true
              codeCoverageEnabled: false
              diagnosticsEnabled: true

  # - stage: Publish
  #   dependsOn: Test
  #   jobs:
  #     - job: PublishJob
  #       steps:
  #         - script: dotnet publish --configuration Release --output $(Build.ArtifactStagingDirectory)/publish
  #           displayName: 'Publish application'

  # - stage: Deploy
  #   dependsOn: Publish
  #   jobs:
  #     - job: DeployJob
  #       steps:
  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             pathToPublish: '$(Build.ArtifactStagingDirectory)/publish'
  #             artifactName: 'drop'
  #             publishLocation: 'Container'
